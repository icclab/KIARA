{
    "docs": [
        {
            "location": "/", 
            "text": "KIARA - FIWARE Advanced  Middleware\n\n\nOverview\n\n\nKIARA Fiware Advanced Middleware is a Java based communication middleware for modern, efficient and secure applications. It is an implementation of the FIWARE Advanced Middleware Generic Enabler (GE). \n\n\nThe Advanced Middleware GE is a set of compile-time and run-time tools, and a communication library to be integrated with the application. Thus, the requirements are rather minimal. In particular it requires no service running in the background.\n\n\nKIARA implements transparent, fast, secure and standard conform communication between applications or services running under different machines and using different Operating Systems. It also provides the users with a friendly and extensible API.\n\n\nThe \nFIWARE platform\n provides a rather simple yet powerful set of APIs (Application Programming Interfaces) that ease the development of Smart Applications in multiple vertical sectors.\n\n\nThe \nFIWARE Catalogue\n contains a rich library of components (Generic Enablers) with reference implementations that allow developers to put into effect functionalities such as the connection to the Internet of Things or Big Data analysis, making programming much easier.\n\n\nFeatures\n\n\nThis first release focuses on the basic features of RPC communication:\n\n\n\n\nEasy to use and extensible Application Programmer Interface (API).\nSynchronous and Asynchronous function calls.\n\n\nModern Interface Definition Language (IDL) \u2192 based on Corba IDL.\n\n\nOMG compliant\n\n\nExtended primitive types.\n\n\n\n\n\n\nIDL derived operation mode for the RPC Client/Server communication pattern\n\n\nBy generating Stubs and Skeletons at compile time \u2192 RPC API\n\n\nBy using proxies to provide and call the functions at runtime \u2192 RPC Dynamic Types API\n\n\n\n\n\n\nIDL derived operation mode for the Publish/Subscribe communication pattern\n\n\nTLS encryption for secure communication\n\n\n\n\nRoadmap\n\n\nUpcoming versions will include additional features:\n\n\n\n\nAdvanced security features like field encryption and authentication\n\n\nApplication derived and mapped operation mode providing dynamic declaration of functions and data type mapping in source code. \n\n\n\n\nGetting started\n\n\nHello World Video\n\n\nThe following video shows a basic Hello World implementation using KIARA. For more details see the \nexample\n below or check the \ndocumentation\n section.\n\n\n\n\n\nA quick example\n\n\nIn the IDL derived approach, first the IDL (Interface Definition Language) definition of the remote functions has to be created:\n\n\nservice Calculator {\n     float32 add (float32 n1, float32 n2);\n     float32 subtract (float32 n1, float32 n2);\n};\n\n\n\n\nThe developer has to implement the server side functions of the class \nCalculatorServantImpl\n:\n\n\npublic static class CalculatorServantImpl extends CalculatorServant\n{\n     @Override\n     public float add (/*in*/ float n1, /*in*/ float n2) {\n          return (float) n1   n2;\n     }\n\n     @Override\n     public float subtract (/*in*/ float n1, /*in*/ float n2) {\n         return (float) n1 - n2;\n     }\n     ...\n}\n\n\n\n\nNow the server can be started:\n\n\n// Create context, server and service\nContext context = Kiara.createContext();\nServer server = context.createServer();\nService service = context.createService();\n\n// Create and register an instance of the CalculatorServant implementation.\nCalculatorServant Calculator_impl = new CalculatorServantImpl();\nservice.register(Calculator_impl);\n\n// register the service on port 9090 using CDR serialization \nserver.addService(service, \ntcp://0.0.0.0:9090\n, \ncdr\n);\n\n// run the server\nserver.run();\n\n\n\n\nThe client can connect and call the remote functions via the generated proxy class:\n\n\n// Create context\nContext context = Kiara.createContext();\n\n// setup the connection to the server\nConnection connection = context.connect(\ntcp://192.168.1.18:9090?serialization=cdr\n);\n\n// get the client Proxy implementation\nCalculatorClient client = connection.getServiceProxy(CalculatorClient.class);\n\n// Call the remote methods\nfloat result = client.add(3, 5);\n\n\n\n\nDocumentation\n\n\nFind the full documentation on \nRead The Docs\n:\n\n\n\n\nInstallation and Administration Guide\n\n\nUser and Programmer Guide\n\n\nOpen Specification\n\n\nAPI Specifications:\n\n\nRPC API Specification\n\n\nRPC Dynamic Types API Specification\n \n\n\nPublish/Subscribe API Specification\n\n\nIDL Specification\n\n\n\n\n\n\n\n\nDownload\n\n\nKIARA is implemented as a Java Library and published on \nMaven-Central\n. It can be used with every modern build management tool like \nMaven\n or \nGradle\n.\nFor basic usage please check our \nInstallation Manual\n and \nUser Guide\n.\n\n\nTo download the source code check out the \nKIARA Github repository\n or download the archive:\n\n\n\n    \nDownload\n.zip file\n\n\n\n\n    \nDownload\n.tar.gz file\n\n\n\nCommunity \n Support\n\n\nTo report bugs or request features, submit issues \nhere on GitHub\n. For additional resources, you can contact the maintainers directly. For general questions and discussions please use the KIARA-discuss mailing list. Once you \nsubscribe\n to the list, you can send mail to the list address: \nicclab-KIARA@dornbirn.zhaw.ch\n. The mailing list archives are also \navailable on the web\n.\n\n\nAnd of course you can follow us on the \nICCLab blog\n for news and updates.\n\n\nLicense\n\n\nKIARA is licensed under the \nLesser GNU Public License (LGPL)\n.\n\n\nProvided by\n\n\n\n\nin colaboration with", 
            "title": "Home"
        }, 
        {
            "location": "/#kiara-fiware-advanced-middleware", 
            "text": "", 
            "title": "KIARA - FIWARE Advanced  Middleware"
        }, 
        {
            "location": "/#overview", 
            "text": "KIARA Fiware Advanced Middleware is a Java based communication middleware for modern, efficient and secure applications. It is an implementation of the FIWARE Advanced Middleware Generic Enabler (GE).   The Advanced Middleware GE is a set of compile-time and run-time tools, and a communication library to be integrated with the application. Thus, the requirements are rather minimal. In particular it requires no service running in the background.  KIARA implements transparent, fast, secure and standard conform communication between applications or services running under different machines and using different Operating Systems. It also provides the users with a friendly and extensible API.  The  FIWARE platform  provides a rather simple yet powerful set of APIs (Application Programming Interfaces) that ease the development of Smart Applications in multiple vertical sectors.  The  FIWARE Catalogue  contains a rich library of components (Generic Enablers) with reference implementations that allow developers to put into effect functionalities such as the connection to the Internet of Things or Big Data analysis, making programming much easier.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "This first release focuses on the basic features of RPC communication:   Easy to use and extensible Application Programmer Interface (API).\nSynchronous and Asynchronous function calls.  Modern Interface Definition Language (IDL) \u2192 based on Corba IDL.  OMG compliant  Extended primitive types.    IDL derived operation mode for the RPC Client/Server communication pattern  By generating Stubs and Skeletons at compile time \u2192 RPC API  By using proxies to provide and call the functions at runtime \u2192 RPC Dynamic Types API    IDL derived operation mode for the Publish/Subscribe communication pattern  TLS encryption for secure communication", 
            "title": "Features"
        }, 
        {
            "location": "/#roadmap", 
            "text": "Upcoming versions will include additional features:   Advanced security features like field encryption and authentication  Application derived and mapped operation mode providing dynamic declaration of functions and data type mapping in source code.", 
            "title": "Roadmap"
        }, 
        {
            "location": "/#getting-started", 
            "text": "Hello World Video  The following video shows a basic Hello World implementation using KIARA. For more details see the  example  below or check the  documentation  section.   A quick example  In the IDL derived approach, first the IDL (Interface Definition Language) definition of the remote functions has to be created:  service Calculator {\n     float32 add (float32 n1, float32 n2);\n     float32 subtract (float32 n1, float32 n2);\n};  The developer has to implement the server side functions of the class  CalculatorServantImpl :  public static class CalculatorServantImpl extends CalculatorServant\n{\n     @Override\n     public float add (/*in*/ float n1, /*in*/ float n2) {\n          return (float) n1   n2;\n     }\n\n     @Override\n     public float subtract (/*in*/ float n1, /*in*/ float n2) {\n         return (float) n1 - n2;\n     }\n     ...\n}  Now the server can be started:  // Create context, server and service\nContext context = Kiara.createContext();\nServer server = context.createServer();\nService service = context.createService();\n\n// Create and register an instance of the CalculatorServant implementation.\nCalculatorServant Calculator_impl = new CalculatorServantImpl();\nservice.register(Calculator_impl);\n\n// register the service on port 9090 using CDR serialization \nserver.addService(service,  tcp://0.0.0.0:9090 ,  cdr );\n\n// run the server\nserver.run();  The client can connect and call the remote functions via the generated proxy class:  // Create context\nContext context = Kiara.createContext();\n\n// setup the connection to the server\nConnection connection = context.connect( tcp://192.168.1.18:9090?serialization=cdr );\n\n// get the client Proxy implementation\nCalculatorClient client = connection.getServiceProxy(CalculatorClient.class);\n\n// Call the remote methods\nfloat result = client.add(3, 5);", 
            "title": "Getting started"
        }, 
        {
            "location": "/#documentation", 
            "text": "Find the full documentation on  Read The Docs :   Installation and Administration Guide  User and Programmer Guide  Open Specification  API Specifications:  RPC API Specification  RPC Dynamic Types API Specification    Publish/Subscribe API Specification  IDL Specification", 
            "title": "Documentation"
        }, 
        {
            "location": "/#download", 
            "text": "KIARA is implemented as a Java Library and published on  Maven-Central . It can be used with every modern build management tool like  Maven  or  Gradle .\nFor basic usage please check our  Installation Manual  and  User Guide .  To download the source code check out the  KIARA Github repository  or download the archive:  \n     Download .zip file  \n     Download .tar.gz file", 
            "title": "Download"
        }, 
        {
            "location": "/#community-support", 
            "text": "To report bugs or request features, submit issues  here on GitHub . For additional resources, you can contact the maintainers directly. For general questions and discussions please use the KIARA-discuss mailing list. Once you  subscribe  to the list, you can send mail to the list address:  icclab-KIARA@dornbirn.zhaw.ch . The mailing list archives are also  available on the web .  And of course you can follow us on the  ICCLab blog  for news and updates.  License  KIARA is licensed under the  Lesser GNU Public License (LGPL) .  Provided by   in colaboration with", 
            "title": "Community &amp; Support"
        }
    ]
}